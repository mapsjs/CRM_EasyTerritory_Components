<html><head>

        <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

        <!-- jQuery library -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

        <!-- Latest compiled JavaScript -->
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    
        <!-- ezt custom css -->
        <link rel="stylesheet" type="text/css" href="../../WebResources/ezt_webResourceStyles.css">

        <!-- Xrm.Page model -->
        <script src="../../WebResources/ClientGlobalContext.js.aspx" type="text/javascript"></script>

        <!-- javascript azync library-->
        <script src="../WebResources/ezt_async.js"></script>

        <meta></head>
     
        <body onfocusout="parent.setEmailRange();" style="word-wrap: break-word;">

            <div style="margin-top:5px; margin-left: 5px; margin-right: 5px">
            <div><img class="eztlogo" src="../../webresources/ezt_logosvg"></div>
            <button onclick="ezt_getView()" class="eztButtonText" id="getViewEntity"><img class="eztButtons1" src="../../webresources/ezt_systemview.png">Get View</button>
        

            <button onclick="ezt_runJob()" class="eztButtonText" id="runJob" style="visibility: visible;" disabled=""><img class="eztButtons" src="../../webresources/ezt_startjob">Bulk Execute Workflow</button>
        <button onclick="ezt_stopJob()" class="eztButtonText" style="visibility: visible;" id="stopJob" disabled=""><img class="eztButtons1" src="../../webresources/ezt_deactivate.png">Cancel</button>


     <div id="log" style="font-family: undefined;"></div>

        <!-- This is paragraph elements for the output of script -->
        <p style="color:red; margin-left:10px; margin-top: 2px; visibility: hidden;" id="cancel"> </p>
        <p style="margin-left:10px; visibility: hidden;" id="ezt"> </p>

        <p style="margin-left:10px; visibility: hidden;" id="errors">Log: </p>
        <p style="margin-left:10px; visibility: visible;" id="divCheckList"> </p>
    </div>
    <script>
    
        (function() {

            //Global variables            
            
            //set clientUrl and workflowId for testing
            var clientUrl = "";
            var workflowId = "";
            var entity = "";
            var moreBlocks = true;
            var cancelClicked = false;
            
            var workFlowFireCount = 0;
            var areFieldsFilledIn = true;
            var eztObject = [];

            function getCrmView() {
                
                setValuesForJob();

                async.waterfall([             
                
                    getEntity,
                    getSystemViews,
                    getUserViews
                     
                        
                ], function(err) {
                    
               
                });


            }

            function startTheScript() {
                    //this sets the variables from the form for runJob()    
                    //setValuesForJob();
                    getViewsFromCheckBox();
                async.waterfall([            
                
                        getEntity,
                        getPluralEntityName
                  
                
                    
                        
                ], function(err, url) {
                    
                    runJob(url);
               
                });
            }

            


            function runJob(url) {
           
           
            
                // hide, enable elements
                {
                    document.getElementById("stopJob").disabled = false;
                } {
                    document.getElementById("errors").style.visibility = "visible";
                } {
                    document.getElementById("runJob").disabled = true;
                } {
                    document.getElementById("ezt").style.visibility = "visible";
                }
                document.getElementById("cancel").innerHTML = ("");
            
                

                


                // This loop is done because we can only get 5,000 records at a time
                async.whilst(

                    function() {
                        //This tests to see if we should go to the next block
                        
                        if(!moreBlocks) {
                                if (cancelClicked == false && areFieldsFilledIn == true) {
                                    document.getElementById("cancel").innerHTML = ("Job Complete!"); {
                                        document.getElementById("cancel").style.visibility = "visible";
                                    }
                                    document.getElementById("getViewEntity").disabled = false;
                                }
                                else {
                                    {
                                        document.getElementById("runJob").disabled = false;
                                        document.getElementById("getViewEntity").disabled = false;
                                    }
                                }
                            //When the job is done make button visiable again to run the job a second time  
                            document.getElementById("runJob").disabled = false; 
                            document.getElementById("getViewEntity").disabled = false;
                        }
                        return moreBlocks;
                    },
                    function(doneWithBlock) {


                        getBlock(url, doneWithBlock, function(nextUrl){url=nextUrl;});

                    },

                    function(err) {
                        if (err) {
                            document.getElementById("errors").innerHTML += ("Error in processing:" + err.message);
                            doneWithBlock();
                        }
                    }
                );
            }
 
 
            function setValuesForJob() {
            //this sets the values from the form the user plugs in to variables used in script
                try {

                    document.getElementById("ezt").innerHTML = "";
                    document.getElementById("cancel").innerHTML = ("");
                    //Comment workflowId and clientUrl out for debugging purposes
                    workflowId = window.parent.Xrm.Page.getAttribute('ezt_workflow').getValue()[0].id;
                    clientUrl = parent.Xrm.Page.context.getClientUrl();

                    entity = "";
                        
                    workFlowFireCount = 0;
                    
                    cancelClicked = false;
                    document.getElementById("errors").innerHTML = ("");
                    areFieldsFilledIn = true;
                    moreBlocks = true;

                    } catch (err) {

                        document.getElementById("errors").innerHTML = ("Please provide valid values into the form fields. <br />");
                        moreBlocks = false;
                        areFieldsFilledIn = false;
                    }

                }
 

            //This gets a block of records from an entity in CRM. 
            function getBlock(url, doneWithBlock, nextUrlCallback) {

                var xhttp = new XMLHttpRequest();
                xhttp.open("GET", url, true);
                xhttp.setRequestHeader("Prefer", "odata.maxpagesize=1000"); //Specify how many records on each page
                xhttp.setRequestHeader("Prefer", "odata.count");

                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {


                        var json = JSON.parse(this.responseText);

                        var block = json.value;
                        
                        

                        //display number of records being retrieved in status
                        document.getElementById("ezt").innerHTML = ("Retrieving: " + json.value.length + " records");

                        processBlock(block, doneWithBlock);

                        // this gets the next page of records link      
                        var urlNext = json["@odata.nextLink"];

                        //if user clicks cancel job moreBlocks is set to false and skips over typeof uri because we don't want more pages, want to be done with loop.
                        if (cancelClicked == false) {
                            // if no more pages (or blocks) of records, this ends the whilst loop
                            if (typeof urlNext == 'undefined') {
                                moreBlocks = false;
                            }

                        }
                        
                        nextUrlCallback(urlNext);

                    } else if (this.status == 404 || this.status == 400) {
                        //this error will occur if an entity that does not exist
                        document.getElementById("errors").innerHTML += ('Error in requesting records from: ' + entity + ', with the url: ' + url + '<br />'); {
                            document.getElementById("runJob").disabled = false;
                        }


                    }
                };
                xhttp.send();
            }

            function processBlock(block, doneWithBlock) {
                async.eachLimit(block, 5,
                    function(block, doneWithRow) {

                        //If we press the cancel button during script it skips the fireWorkflow() and goes to callback()                                                        
                        if (cancelClicked) {
                            doneWithRow('cancelled');

                        } else {
                           
                            entityid = (entity + "id");
                            var entityId = block[entityid];

                            fireWorkflow(entityId, block, doneWithRow);

                        }

                    },
                    function(err) {
                        if (err && err != 'cancelled') {
                            document.getElementById("errors").innerHTML += ("Error processing in eachSeries:" + err);

                        }
                        doneWithBlock();
                    });

            }


            // this is done to fire workflow for each record
            function fireWorkflow(entityId, block, doneWithRow) {

                var functionName = "executeWorkflow";
                var query = "";
                try {

                    //Define the query to execute the action
                    query = "workflows(" + workflowId.replace("}", "").replace("{", "") + ")/Microsoft.Dynamics.CRM.ExecuteWorkflow";
                    


                    var data = {
                        "EntityId": entityId
                    };

                    //Create request
                    // request url
                    
                    var completeUrl = clientUrl + "/api/data/v8.2/" + query;
                    
                    var req = new XMLHttpRequest();
                    
                    req.open("POST", completeUrl, true);
                    req.setRequestHeader("Accept", "application/json");
                    req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                    req.setRequestHeader("OData-MaxVersion", "4.0");
                    req.setRequestHeader("OData-Version", "4.0");

                    req.onreadystatechange = function() {

                        if (this.readyState == 4) {
                            req.onreadystatechange = null;

                            if (this.status == 200) {
                                //success callback this returns null since no return value available.
                                var result = JSON.parse(this.response);

                                workFlowFireCount++;


                                document.getElementById("ezt").innerHTML = ("Completed workflow on " + workFlowFireCount + " records");
                                doneWithRow();

                            } else if (this.status == 400 || this.status == 404 || this.status == 500) {
                                //error callback
                                var error = JSON.parse(this.response).error;
                                document.getElementById("errors").innerHTML += ('Error messages:  ' + error.message + '<br />');
                                doneWithRow();
                            }
                        }
                    };
                    req.send(JSON.stringify(data));

                } catch (err) {

                    document.getElementById("errors").innerHTML += ("Error in executing: " + functionName + ":  " + err);
                }

            }


            function stopJob() {

                //this function is called if user wants to stop the job
                moreBlocks = false;
                cancelClicked = true;

                {
                    document.getElementById("cancel").style.visibility = "visible";
                }
                document.getElementById("cancel").innerHTML = ("Canceled!");

            }

            
            function getPluralEntityName(entity, entityid, waterfallCallback) {


                var entitypluralURL = clientUrl +
                    "/api/data/v8.2/EntityDefinitions?$select=LogicalName,LogicalCollectionName&$filter=LogicalName eq '" +
                    entity + "'";
                //var entitypluralURL = "crmDomain/api/data/v8.2/EntityDefinitions?$select=LogicalName,LogicalCollectionName&$filter=LogicalName eq 'lead'"

                var Enxhttp = new XMLHttpRequest();
                Enxhttp.open("GET", entitypluralURL, true);
                Enxhttp.onreadystatechange = function() {
                    
                    if (this.readyState == 4 && this.status == 200) {

                        var entityJson = JSON.parse(this.responseText);

                        var entityPluralName = entityJson.value[0].LogicalCollectionName;
                        
                        //var url = (clientUrl + '/api/data/v8.2/' + entityPluralName + '/?$select=' + entityid);
                        var url = "";
                        
                        if(eztObject.length !== 0){
                            if(eztObject[0].queryType == 'systemQuery'){

                                url = (clientUrl + '/api/data/v8.2/' + entityPluralName + '/?savedQuery=' + eztObject[0].queryId);

                            } else if (eztObject[0].queryType == 'userQuery'){

                                url = (clientUrl + '/api/data/v8.2/' + entityPluralName + '/?userQuery=' + eztObject[0].queryId);

                            }
                        }
                       
                        
                        waterfallCallback(null, url);


                    } else if (this.status == 400 || this.status == 404 || this.status == 500) {
                        document.getElementById("errors").innerHTML += (this.responseText);
                        waterfallCallback(err);
                    }
                };

                Enxhttp.send();
            }


            function getEntity(waterfallCallback) {
               
               
               var endPoint = workflowId.replace("}", "").replace("{", "");

                var EntityUrl = (clientUrl + '/api/data/v8.2/workflows?$select=name,primaryentity&$filter=workflowid eq (' + endPoint + ')');


                var call = new XMLHttpRequest();
                call.open("GET", EntityUrl, true);

                call.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {

                        var json = JSON.parse(this.responseText);

                        entity = json.value[0].primaryentity;

                        var entityid = (entity + "id");

                        waterfallCallback(null, entity, entityid);
                        
                    } else if (this.status == 400 || this.status == 404 || this.status == 500) {
                        document.getElementById("errors").innerHTML += (this.responseText);
                        
                        waterfallCallback(err);
                    }
                };
                call.send();
            }

            function getSystemViews(entity, entityid, waterfallCallback){

                document.getElementById("ezt").style.visibility = "visible";
                document.getElementById("runJob").disabled = false;

                var myDoc = document.getElementById("ezt");

                var getSavedQuery = clientUrl + "/api/data/v8.2/savedqueries?$select=name,savedqueryid,returnedtypecode&$filter=returnedtypecode eq '" + entity + "'"; 

                var call = new XMLHttpRequest();
                call.open("GET", getSavedQuery, true);

                call.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {

                        var json = JSON.parse(this.responseText);
                        /*
                        json.value.forEach(function(x){

                            document.getElementById("ezt").innerHTML += ('checkBox:  ' + x.name + '<br />');
                            console.log(x.name);

                        }) */

                     for (var i = 0; i < json.value.length; i++) {

                            var viewName = json.value[i].name;
                            var entityOfView = json.value[i].returnedtypecode;
                            var viewSavedQueryId = json.value[i].savedqueryid;
                            var typeOfQuery = 'systemQuery';

                            addCheckboxItem(entityOfView,'divCheckList',viewName,viewSavedQueryId, typeOfQuery);
                    }

                        waterfallCallback(null, entity, entityid);
                        
                    } else if (this.status == 400 || this.status == 404 || this.status == 500) {
                        document.getElementById("errors").innerHTML += (this.responseText);
                        
                        waterfallCallback();
                    }
                };
                call.send();

            }

            function getUserViews(entity, entityid, waterfallCallback){

                var getUserQuery = clientUrl + "/api/data/v8.2/userqueries?$select=name,userqueryid,returnedtypecode&$filter=returnedtypecode eq '" + entity + "'"; 

                var call = new XMLHttpRequest();
                call.open("GET", getUserQuery, true);

                call.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {

                        var json = JSON.parse(this.responseText);
                        /*
                        json.value.forEach(function(x){

                            document.getElementById("ezt").innerHTML += ('checkBox:  ' + x.name + '<br />');
                            console.log(x.name);

                        }) */

                     for (var i = 0; i < json.value.length; i++) {

                            var viewName = json.value[i].name;
                            var entityOfView = json.value[i].returnedtypecode;
                            var viewSavedQueryId = json.value[i].userqueryid;
                            var typeOfQuery = 'userQuery';

                            addCheckboxItem(entityOfView,'divCheckList',viewName,viewSavedQueryId,typeOfQuery);
                    }

                        waterfallCallback(null, entity, entityid);
                        
                    } else if (this.status == 400 || this.status == 404 || this.status == 500) {
                        document.getElementById("errors").innerHTML += (this.responseText);
                        
                        waterfallCallback();
                    }
                };
                call.send();

            }


        function addCheckboxItem(entityOfView, divName, viewName, viewSavedQueryId, typeOfQuery) {

            document.getElementById("divCheckList").style.visibility = "visible";
            var cbViews = document.getElementById("divCheckList");
            var label = document.createElement("label");
            var description = document.createTextNode(" [" + entityOfView + "] - " + viewName);
            var checkbox = document.createElement("input");

            checkbox.type = "radio";
            checkbox.name = "cbViews";
            checkbox.value =  viewName + "|" + entityOfView + "|" + viewSavedQueryId + "|" + typeOfQuery;

            // TODO:  Figure out how to make this work...
            // checkbox.onkeyup = 'checkEnableButton()';

            label.appendChild(checkbox);
            label.appendChild(description);

            // add the label element to your div
            document.getElementById(divName).appendChild(label);
            document.getElementById(divName).appendChild(document.createElement("br"));

            document.getElementById("getViewEntity").disabled = true;
            document.getElementById("runJob").style.visibility = "visible";

        }

        function getViewsFromCheckBox(){

            document.getElementById("errors").innerHTML = "";
            //document.getElementById("divCheckList").innerHTML = ("");
            var cbViews = document.getElementById("divCheckList");
            var listLength = cbViews.children.length;
            eztObject = [];

            for (var i = 0; i < listLength; i += 2) {
                if (cbViews.children[i].children[0].checked) {
                    var strLabelValue = cbViews.children[i].children[0].value;
                    // var strLabel = cbViews.children[i].children[0].label;
                    var strLabel = cbViews.children[i].innerText.trim();
                    var strArrayValueData = strLabelValue.split('|');
                    var strViewName = strArrayValueData[0];
                    var strViewType = strArrayValueData[1];
                    var strViewQueryId = strArrayValueData[2];
                    var strTypeOfQuery = strArrayValueData[3];
                    eztObject.push({
                        view: strViewName,
                        entity: strViewType,
                        queryId: strViewQueryId,
                        queryType: strTypeOfQuery
                    });
                }
            }

            if(eztObject.length == 0){ 

               
                document.getElementById("errors").style.visibility = "visible";
                document.getElementById("errors").innerHTML = ("View not selected. Please retrieve list of views again and select a view. <br />");
                document.getElementById("getViewEntity").disabled = false;
                document.getElementById("divCheckList").innerHTML = "";
                moreBlocks = false;
                areFieldsFilledIn = false;
                    
            }   else{

                document.getElementById("divCheckList").style.visibility = "hidden";
                document.getElementById("divCheckList").innerHTML = "";
            }

        }

            window.ezt_runJob = startTheScript;
            window.ezt_stopJob = stopJob;

            window.ezt_getView = getCrmView;
        })();
    </script>








</body></html>
